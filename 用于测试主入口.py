from 任务流程.进攻坐标逻辑计算 import 判断目标点到可进攻边缘距离是否小于设定值, 坐标

# 原始检测到的数据
识别到的数据 = [
    {'裁剪坐标': [346, 112, 377, 140], '类别名称': '金矿', '置信度': 0.9493779540061951},
    {'裁剪坐标': [437, 90, 467, 123], '类别名称': '圣水采集器', '置信度': 0.943164587020874},
    {'裁剪坐标': [477, 162, 510, 195], '类别名称': '圣水瓶', '置信度': 0.9418305158615112}, {'裁剪坐标': [345, 73, 375, 107], '类别名称': '圣水采集器', '置信度': 0.9306615591049194}, {'裁剪坐标': [401, 70, 432, 99], '类别名称': '金矿', '置信度': 0.929370641708374}, {'裁剪坐标': [205, 177, 237, 212], '类别名称': '圣水采集器', '置信度': 0.9245280027389526}, {'裁剪坐标': [590, 297, 620, 323], '类别名称': '金矿', '置信度': 0.910398006439209}, {'裁剪坐标': [613, 221, 642, 253], '类别名称': '圣水采集器', '置信度': 0.9080736041069031}, {'裁剪坐标': [171, 212, 202, 241], '类别名称': '金矿', '置信度': 0.8999843597412109}, {'裁剪坐标': [512, 188, 545, 220], '类别名称': '圣水瓶', '置信度': 0.8959040641784668}, {'裁剪坐标': [632, 288, 662, 322], '类别名称': '圣水采集器', '置信度': 0.8837695121765137}, {'裁剪坐标': [163, 242, 192, 276], '类别名称': '圣水采集器', '置信度': 0.8811762928962708}, {'裁剪坐标': [294, 350, 328, 383], '类别名称': '圣水瓶', '置信度': 0.8798148036003113}, {'裁剪坐标': [259, 323, 294, 357], '类别名称': '圣水瓶', '置信度': 0.8667667508125305}, {'裁剪坐标': [209, 349, 247, 385], '类别名称': '金库', '置信度': 0.8576819896697998}, {'裁剪坐标': [107, 278, 137, 307], '类别名称': '金矿', '置信度': 0.8570294380187988}, {'裁剪坐标': [368, 365, 407, 397], '类别名称': '金库', '置信度': 0.8477687835693359}, {'裁剪坐标': [196, 277, 231, 311], '类别名称': '金库', '置信度': 0.8334364295005798}]


# 最终保存符合条件的目标
剔除后的目标数组 = []

# 阈值：距离小于它才认为可以进攻
距离阈值 = 80

for 片段 in 识别到的数据:
    种类 = 片段['类别名称']
    # 只处理金矿和圣水采集器
    if 种类 not in ('金矿', '圣水采集器'):
        continue

    # 取裁剪框左上角作为识别坐标
    左, 上, 右, 下 = 片段['裁剪坐标']
    识别坐标 = 坐标(int(左), int(上))

    # 判断到边缘的最小垂线距离是否小于阈值
    if 判断目标点到可进攻边缘距离是否小于设定值(识别坐标, 距离阈值):
        剔除后的目标数组.append(片段)

# 输出结果
print(f"符合进攻条件的目标共 {len(剔除后的目标数组)} 个：")
for item in 剔除后的目标数组:
    print(f"  - 类型：{item['类别名称']}，坐标：{item['裁剪坐标'][0:2]}，置信度：{item['置信度']:.3f}")
